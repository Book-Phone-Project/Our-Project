#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
#include<stdbool.h>
#include <conio.h>
#include <windows.h>
#include <dos.h>
COORD coord = {0, 0};
void gotoxy(int, int);
typedef struct {
    char fullName[50], gender[7], country[15], city[15], mail[50], ph_num[15], age[10];
}contactInfo;
struct stackNode {
    contactInfo info;
    struct stackNode *next;
};
typedef struct stackNode node;
typedef struct stackNode* nodeptr;
void takeDataFromFile(nodeptr *);
void saveInFile(nodeptr);
void instructions(void);
void addition(nodeptr *);
void push(nodeptr *, contactInfo);
void modify(nodeptr *);
void pop(nodeptr *);
void deleteExistContact(nodeptr *);
void research(nodeptr);
void display(nodeptr);
void reset(nodeptr *);
bool isEmpty(nodeptr);
void welcome();
bool exceed(char []);
bool zerobegin(char input[]);
bool isString(char []);
bool isSubstring(char[], char[]);
bool email_is_valid(char []);
FILE *fptr;
char fname[] = {"file.txt"};
void main(void) {
    welcome();
    nodeptr top = NULL;
    takeDataFromFile(&top);
    char input[20];
    instructions();
   gotoxy(65,22);
    while (1) {
        scanf("%s", input);
        system("cls");
        if (isString(input)){gotoxy(45,26); printf(">> Please, Enter a Valid Number <<");}
        else {
            int choice = atoi(input);
            switch(choice) {
                case 1:
                    addition(&top);
                    break;
                case 2:
                    if (isEmpty(top)){gotoxy(45,26);printf(">> Your Contacts is Empty <<");}
                    else modify(&top);
                    break;
                case 3:
                    if (isEmpty(top)){gotoxy(45,26);printf(">> Your Contacts is Empty <<");}
                    else {pop(&top);
                    gotoxy(45,26);printf(">> Contact Delete Successfully <<");
                    }
                    break;
                case 4:
                    if (isEmpty(top)){gotoxy(45,26);printf(">> Your Contacts is Empty <<");}
                    else deleteExistContact(&top);
                    break;
                case 5:
                    research(top);
                    break;
                case 6:
                    if (isEmpty(top)){gotoxy(45,26);printf(">> Your Contacts is Empty <<");}
                    else display(top);
                    getch();
                    system("cls");
                    break;
                case 7:
                    reset(&top);
                    gotoxy(45,26);
                    printf(">> Program Reset Done <<");
                    break;
                case 8:
                    system("color 08");
                    gotoxy(45,10);
                    printf(">> Thank You For Use Our Program <<\n\n\n\n\n\n");
                    return;
                default:
                    gotoxy(45,26);
                    printf(">> Invalid Choice <<");
                    break;
            }
        }
        instructions();
    }
}
void gotoxy(int x, int y) {
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
void welcome(){
    system("color e9");
 gotoxy(38,2);
 printf("**>>>>________  Welcome To Phone Book  ________<<<<**");
 gotoxy(3,27);
 printf("**>> Created By [H,K,I,A,M] <<**\n");
 getch();
 return 0;
}
void takeDataFromFile(nodeptr *top) {
    contactInfo data;
    fptr = fopen(fname, "rb");
    while(1) {
        fread(&data, sizeof(data), 1, fptr);
        if(feof(fptr))break;
        nodeptr newnode = (nodeptr)malloc(sizeof(node));
        newnode->info = data;
        newnode->next = *top;
        *top = newnode;
    }
    fclose(fptr);
    return;
}
void saveInFile(nodeptr top) {
    fptr = fopen(fname, "wb");
    while (!isEmpty(top)) {
        fwrite(&(top->info), sizeof(top->info), 1, fptr);
        top = top->next;
    }
    fclose(fptr);
    return;
}
void instructions(void) {
   system("color 0b");
    gotoxy(45,4);
    printf ("*********** Welcome ***********");
    gotoxy(45,6);
    printf ("[1]- Add a new contact.        ");
    gotoxy(45,8);
    printf ("[2]- Modify an exist contact.  ");
    gotoxy(45,10);
    printf ("[3]- Delete the first contact. ");
    gotoxy(45,12);
    printf ("[4]- Delete an exist contact.  ");
    gotoxy(45,14);
    printf ("[5]- Research.                 ");
    gotoxy(45,16);
    printf ("[6]- Display your contacts.    ");
    gotoxy(45,18);
    printf ("[7]Reset.                      ");
    gotoxy(45,20);
    printf ("[8]End.                        ");
    gotoxy(45,22);
    printf ("Enter Your Choice:             ");
    return 0;
}
// Recieve Data from the user and check for some Validations on its Info ..
void addition(nodeptr *top) {
//creat a struct form type contactInfo
    contactInfo userInfo;
    system("cls");
   // Recieve Data from the user ...
                system("color 0e");
                puts("");
                fflush(stdin);
                gotoxy(45,2);
                printf("*>____________ ©Phone Book® ____________<*");
                gotoxy(57,4);
                printf("*>> Add Contact <<*");
                gotoxy(5,6);
                printf(">> Full Name     : ");
                gotoxy(24,6);
                gets(userInfo.fullName);
                gotoxy(5,8);
                printf(">> Gender        : ");
                fflush(stdin);
                gotoxy(24,8);
                scanf("%s", userInfo.gender);
                gotoxy(5,10);
                printf(">> E-Mail        : ");
                gotoxy(24,10);
                scanf("%s", userInfo.mail);
    // Validation of E-mail ...
        while (!email_is_valid(userInfo.mail)) {
        gotoxy(5,11);
        printf (">> Sorry, The E-Mail must be a Valid E-mail Form (Someone@example.com) <<");
        gotoxy(5,12);
        printf(">> E-Mail           : ");
        scanf("%s", userInfo.mail);
    }
                gotoxy(5,14);
                printf(">> Age           : ");
                scanf("%s", &userInfo.age);
    // Validation of age ...
   while (isString(userInfo.age) || exceed(userInfo.age) || zerobegin(userInfo.age)) {
            if(isString(userInfo.age)){
        gotoxy(5,15);
        printf (">> Sorry, The Age must be Valid Number <<");
        gotoxy(5,16);
        printf(">> Age           : ");
        scanf("%s", userInfo.age);
            }
            else if(exceed(userInfo.age)){
        gotoxy(5,17);
        printf (">> Sorry, The Age mustn't exceed 150 years <<");
        gotoxy(5,18);
        printf(">> Age           : ");
        scanf("%s", userInfo.age);
            }
            else if(zerobegin(userInfo.age)){
        gotoxy(5,19);
        printf (">> Sorry, The Age can't be zero and can't begin with zero <<");
        gotoxy(5,20);
        printf(">> Age           : ");
        scanf("%s", userInfo.age);
            }
    }
                gotoxy(5,22);
                printf(">> Country       : ");
                fflush(stdin);
                gotoxy(24,22);
                scanf("%s", userInfo.country);
                gotoxy(5,24);
                printf(">> City          : ");
                fflush(stdin);
                gotoxy(24,24);
                scanf("%s", userInfo.city);
                gotoxy(5,26);
                printf(">> Phone Number  : ");
                fflush(stdin);
                gotoxy(24,26);
                scanf("%s", userInfo.ph_num);
     // Validation of Phone Number ..
    while (isString(userInfo.ph_num)) {
        gotoxy(5,27);
        printf (">> Sorry, The Phone Number must be Valid Number <<");
        gotoxy(5,28);
        printf(">> Phone Number  : ");
        fflush(stdin);
        gotoxy(24,28);
        scanf("%s", userInfo.ph_num);
    }
    // call for Push Function to add new Contact..
    push(top, userInfo);
    gotoxy(56,32);
    printf("*> Successfully Add <*\n\n");
    getch();
    system("cls");
}
   // Push Fuction to add new Contact ..
void push(nodeptr *top, contactInfo userInfo) {
    nodeptr newnode = (nodeptr)malloc(sizeof(node));
    newnode->info = userInfo;
    newnode->next = *top;
    *top = newnode;
    saveInFile(*top);
    return;
}
void modify(nodeptr *top) {
    system("color 0c");
    gotoxy(42,2);
    printf("*>____________ ©Phone Book® ____________<*");
    gotoxy(52,4);
    printf("*>> Modify Contact <<*");
    nodeptr temp = *top, tomodifyPtr;
    int cnt = 0, choice;
    char name[30];
    gotoxy(2,8);
    printf(">> Enter The Name of Contact which you need to modify: ");
    fflush(stdin);
    gotoxy(57,8);
    gets(name);
    struct stackCpy {
        nodeptr ptrData;
        struct stackCpy* next;
    };
    typedef struct stackCpy cpy;
    typedef struct stackCpy* cpyptr;
    cpyptr topCpy = NULL;
    while(!isEmpty(temp)) {
        if (isSubstring(temp->info.fullName, name)) {
            cnt++;
            cpyptr newnode = (cpyptr)malloc(sizeof(cpy));
            newnode->ptrData = temp;
            newnode->next = topCpy;
            topCpy = newnode;
        }
        temp = temp->next;
    }
    if (cnt == 0) {
        gotoxy(2,10);
        printf(">> Not Found << ");
        getch();
        system("cls");
        return;
    }
    else if (cnt != 1) {
        cpyptr tempCpy = topCpy;
        gotoxy(2,10);
        printf(">> Please, Choose name from the Following Contacts: \n\n");
        for (int i = 0; i < cnt; i++) {
            printf("[%d]-\n", i + 1);
            printf ("\tFull Name   :- %s\n", tempCpy->ptrData->info.fullName);
            printf ("\tGender      :- %s\n", tempCpy->ptrData->info.gender);
            printf ("\tE-Mail      :- %s\n", tempCpy->ptrData->info.mail);
            printf ("\tAge         :- %s\n", tempCpy->ptrData->info.age);
            printf ("\tCountry     :- %s\n", tempCpy->ptrData->info.country);
            printf ("\tCity        :- %s\n", tempCpy->ptrData->info.city);
            printf ("\tPhone Number:- %s\n", tempCpy->ptrData->info.ph_num);
            tempCpy = tempCpy->next;
            puts("\n");
        }
        printf("Enter your Choice: ");
        scanf("%d", &choice);
        tempCpy = topCpy;
        for (int i = 0; i < choice - 1 ; i++) tempCpy = tempCpy->next;
        tomodifyPtr = tempCpy->ptrData;
    }
    else tomodifyPtr = topCpy->ptrData;
    printf("\nThe Exist Contact is:   \n\n");
    printf ("\tFull Name   :- %s\n", tomodifyPtr->info.fullName);
    printf ("\tGender      :- %s\n", tomodifyPtr->info.gender);
    printf ("\tE-Mail      :- %s\n", tomodifyPtr->info.mail);
    printf ("\tAge         :- %s\n", tomodifyPtr->info.age);
    printf ("\tCountry     :- %s\n", tomodifyPtr->info.country);
    printf ("\tCity        :- %s\n", tomodifyPtr->info.city);
    printf ("\tPhone Number:- %s\n", tomodifyPtr->info.ph_num);
    puts("\n");
    int subChoice;
    do{
         printf ("\nEnter Your choice:\n"
            "   [1]- to modify The Name\n"
            "   [2]- to modify The Gender\n"
            "   [3]- to modify The Mail\n"
            "   [4]- to modify The Age\n"
            "   [5]- to modify The Country\n"
            "   [6]- to modify The City\n"
            "   [7]- to modify The Phone Number\n"
            "   [8]- to modify The Entire Contact\n"
            "   [0]- to save\n");
            scanf("%d" ,&subChoice);
        while (subChoice > 8 || subChoice < 0 ){
            printf("\n>>Enter a valid choice from '0 To 8'<<\n");
            scanf("%d", &subChoice);
        }
        switch(subChoice) {
            case 1:
                printf ("\nEnter The New Name: ");
                fflush(stdin);
                gets(tomodifyPtr->info.fullName);
                break;
            case 2:
                printf ("\nEnter The New Gender:");
                fflush(stdin);
                gets(tomodifyPtr->info.gender);
                break;
            case 3:
                printf ("\nEnter The New E-Mail:");
                fflush(stdin);
                gets(tomodifyPtr->info.mail);
                break;
            case 4:
                printf ("\nEnter The New Age:");
                fflush(stdin);
                scanf("%s", tomodifyPtr->info.age);
                break;
            case 5:
                printf ("\nEnter The New Country:");
                fflush(stdin);
                gets(tomodifyPtr->info.country);
                break;
            case 6:
                printf ("\nEnter The New City:");
                fflush(stdin);
                gets(tomodifyPtr->info.city);
                break;
            case 7:
                printf ("\nEnter The New Phone Number:");
                fflush(stdin);
                scanf("%s", tomodifyPtr->info.ph_num);
                break;
            case 8:
                fflush(stdin);
                printf("\nEnter The New Name          :\n");
                gets(tomodifyPtr->info.fullName);
                printf ("\nEnter The New Gender       :\n");
                fflush(stdin);
                scanf("%s", tomodifyPtr->info.gender);
                printf ("\nEnter The New Mail         :\n");
                scanf("%s", tomodifyPtr->info.mail);
                printf ("\nEnter The New Age          :\n");
                scanf("%s", tomodifyPtr->info.age);
                printf ("\nEnter The New Country      :\n");
                fflush(stdin);
                scanf("%s", tomodifyPtr->info.country);
                printf ("\nEnter The New city         :\n");
                scanf("%s", tomodifyPtr->info.city);
                printf ("\nEnter The New Phone Number :\n");
                scanf("%s", tomodifyPtr->info.ph_num);
                break;
        }
    } while (subChoice != 0);
    saveInFile(*top);
    printf("\n>> The Contact after modifying:  \n\n");
    printf ("\tFull Name   :- %s\n", tomodifyPtr->info.fullName);
    printf ("\tGender      :- %s\n", tomodifyPtr->info.gender);
    printf ("\tE-Mail      :- %s\n", tomodifyPtr->info.mail);
    printf ("\tAge         :- %s\n", tomodifyPtr->info.age);
    printf ("\tCountry     :- %s\n", tomodifyPtr->info.country);
    printf ("\tCity        :- %s\n", tomodifyPtr->info.city);
    printf ("\tPhone Number:- %s\n", tomodifyPtr->info.ph_num);
    puts("\n");
    getch();
    system("cls");
    return;
}
// Deletion of the Last node ....
void pop(nodeptr *top) {
    nodeptr temp = *top;
    *top = (*top)->next;
    free(temp);
    saveInFile(*top);
    return;
}
void deleteExistContact(nodeptr *top) {
    system("color 09");
    system("cls");
    gotoxy(43,2);
    printf("*>____________ ©Phone Book® ____________<*");
    gotoxy(53,4);
    printf("*>> Delete Contact <<*");
    nodeptr temp = *top, toDeletePtr;
    int cnt = 0, choice;
    char name[30];
    gotoxy(2,8);
    printf(">> Enter The Name of Contact which you need to delete: ");
    fflush(stdin);
    gets(name);
    struct stackCpy {
        nodeptr ptrData;
        struct stackCpy* next;
    };
    typedef struct stackCpy cpy;
    typedef struct stackCpy* cpyptr;
    cpyptr topCpy = NULL;
    while(!isEmpty(temp)) {
        if (isSubstring(temp->info.fullName, name)) {
            cnt++;
            cpyptr newnode = (cpyptr)malloc(sizeof(cpy));
            newnode->ptrData = temp;
            newnode->next = topCpy;
            topCpy = newnode;
        }
        temp = temp->next;
    }
    if (cnt == 0) {
        gotoxy(2,10);
        printf(">> Contact Not Found << ");
        getch();
        system("cls");
        return;
    }
    else if (cnt != 1) {
        cpyptr tempCpy = topCpy;
        gotoxy(2,10);
        printf(">> Please, Choose name from the Following Contacts:\n\n");
        for (int i = 0; i < cnt; i++) {
            printf("[%d]-\n", i + 1);
            printf ("\tFull Name   :- %s\n", tempCpy->ptrData->info.fullName);
            printf ("\tGender      :- %s\n", tempCpy->ptrData->info.gender);
            printf ("\tE-Mail      :- %s\n", tempCpy->ptrData->info.mail);
            printf ("\tAge         :- %s\n", tempCpy->ptrData->info.age);
            printf ("\tCountry     :- %s\n", tempCpy->ptrData->info.country);
            printf ("\tCity        :- %s\n", tempCpy->ptrData->info.city);
            printf ("\tPhone Number:- %s\n", tempCpy->ptrData->info.ph_num);
            tempCpy = tempCpy->next;
            puts("\n");
        }
        printf("Enter your Choice: ");
        scanf("%d", &choice);
        tempCpy = topCpy;
        for (int i = 0; i < choice - 1 ; i++)tempCpy = tempCpy->next;
        toDeletePtr = tempCpy->ptrData;
    }
    else toDeletePtr = topCpy->ptrData;
    nodeptr top2 = NULL;
    while (*top != toDeletePtr){
        push(&top2, (*top)->info);
        pop(top);
    }
    pop(top);
    while (top2 != NULL) {
        push(top, top2->info);
        pop(&top2);
    }
    saveInFile(*top);
    printf("\n\t\t\t\t\t>> The contact has been deleted completely <<");
    getch();
    system("cls");
    return;
}
void research(nodeptr top) {
    int j = 0;
    system("color 0d");
    system("cls");
    gotoxy(43,2);
    printf("*>____________ ©Phone Book® ____________<*");
    gotoxy(52,4);
    printf("*>> Research Contact <<*");
    char data[30];
    gotoxy(2,8);
    printf(">> Enter The Name or The Phone Number of Contact which you need to search: ");
    gotoxy(77,8);
    scanf("%s",data);
    puts("");
    bool ok = true;
    while (!isEmpty(top)) {
        if (isSubstring(top->info.fullName, data) || isSubstring(top->info.ph_num, data)) {
        j++;
        printf("\n\n\n[%d]-\n" ,j);
        printf ("\nFull Name    : %s\n", top->info.fullName);
        printf ("Gander       : %s\n", top->info.gender);
        printf ("E-Mail       : %s\n", top->info.mail);
        printf ("Age          : %u\n", top->info.age);
        printf ("Country      : %s\n", top->info.country);
        printf ("City         : %s\n", top->info.city);
        printf ("Phone number : %s\n", top->info.ph_num);
            ok = false;
        }
        top = top->next;
    }
    gotoxy(50,16);
    if (ok == true)printf(">> The Contact isn't exist <<");
    getch();
    system("cls");
    return;
}
void display(nodeptr top) {
    int z = 0;
    system("color 0a");
    system("cls");
    gotoxy(42,2);
    printf("*>____________ ©Phone Book® ____________<*");
    gotoxy(52,4);
    printf("*>> Display Contacts <<*");
    while(top != NULL) {
        z++;
        printf("\n\n\n[%d]-\n" ,z);
        printf ("\nFull Name    : %s\n", top->info.fullName);
        printf ("Gander       : %s\n", top->info.gender);
        printf ("E-Mail       : %s\n", top->info.mail);
        printf ("Age          : %u\n", top->info.age);
        printf ("Country      : %s\n", top->info.country);
        printf ("City         : %s\n", top->info.city);
        printf ("Phone number : %s\n", top->info.ph_num);
        top = top->next;
        puts("\n");
    }
    puts("");
    return;
}
// Resetting All the data (Restart the Programm)..
void reset(nodeptr *top) {
    while(!isEmpty(*top))pop(top);
    saveInFile(*top);
    return;
}
// check if The Stack is Empty or not
bool isEmpty(nodeptr top) {
    return top == NULL;
}
// chech if The Array contains only digits or not ... 
bool isString(char input[]) {
    for (int i = 0; i < strlen(input); i++)
        if (!isdigit(input[i]))return true;
    return false;
}
bool isSubstring(char str1[], char str2[]) {
    for (int i = 0; str1[i] != NULL; i++)str1[i] = tolower(str1[i]);
    for (int i = 0; str2[i] != NULL; i++)str2[i] = tolower(str2[i]);
    char *ref = strstr(str1, str2);
    if (ref) return true;
    else return false;
}
// check on maximum Value of age....
bool exceed(char input[])
{
        if (atoi(input)>150)return true;
     return false;
}
// check on the beginning of the number not to be (0) ....
bool zerobegin(char input[])
{
        if (input[0]=='0')return true;
     return false;
}
bool email_is_valid(char email[50]){
    if(!isalpha(email[0])) return 0; //checking if the first character is alpha or not
    /* variables (at) and (dot) is to determine
    the position of '@' and '.' in the string email. */
    int at = -5, dot = -5;
    for (int i = 0; i < strlen(email); ++i) { // searching for the position of '@' and '.'
        if(email[i] == '@') at = i;
        if(email[i] == '.') dot = i;
        if(email[i] == ' ') return 0;
    }
    if((dot - at) == 1 ) return 0;      //  check if there are  characters between'@' and '.'
    if(at == -5 || dot == -5) return 0; //  check if '@' and '.' are not exist
    if(at > dot) return 0;              //check if '@' after '.'
    return (dot != (strlen(email)) - 1); //check if dot at the end of string email
}
